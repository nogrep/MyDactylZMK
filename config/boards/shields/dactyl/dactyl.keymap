#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>

#define  QW 0
#define MAC 1
#define LWR 2
#define RSE 3
#define ADJ 4
#define GAM 5


&lt {
    tapping-term-ms = <100>;
};
&sk {
    release-after-ms = <5000>;
};
/ {
     macros {
        lshiftAlt: lshiftAlt {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings
                = <&macro_press &kp LSHFT &kp LALT>
                , <&macro_pause_for_release>
                , <&macro_release &kp LSHFT &kp LALT>
                ;
        };

        ctrlShiftAltWin: ctrlShiftAltWin {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings
                = <&macro_press &kp LCTRL &kp LSHFT &kp LALT &kp LGUI>
                , <&macro_pause_for_release>
                , <&macro_release &kp LCTRL &kp LSHFT &kp LALT &kp LGUI>
                ;
        };
    };

    behaviors {
        lshiftAltHoldTap: lshiftAltHoldTap {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <400>;
            quick-tap-ms = <200>;
            bindings = <&lshiftAlt>, <&kp>;
        };

        ctrlShiftAltWinHoldTap: ctrlShiftAltWinHoldTap {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <400>;
            quick-tap-ms = <200>;
            bindings = <&ctrlShiftAltWin>, <&kp>;
        };

        HTap: HTap {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "hold-preferred";
            tapping-term-ms = <300>;
            quick-tap-ms = <200>;
            bindings = <&kp>, <&kp>;
        };

        skq: sticky_key_quick_release {
          compatible = "zmk,behavior-sticky-key";
          #binding-cells = <1>;
          bindings = <&kp>;
          release-after-ms = <3000>;
          quick-release;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
                &caps_word     &kp N1        &kp N2     &kp N3         &kp N4     &kp N5                                        &kp N6        &kp N7      &kp N8            &kp N9     &kp N0         &kp MINUS
                &kp TAB        &kp Q         &kp W      &kp E          &kp R      &kp T                                         &kp Y         &kp U       &kp I             &kp O      &kp P          &kp LBKT
                &mt LCTRL RET  &kp A         &kp S      &kp D          &kp F      &kp G                                         &kp H         &kp J       &kp K             &kp L      &kp SEMI       &kp SQT
                &mt LSHIFT ESC &kp Z         &kp X      &kp C          &kp V      &kp B                                         &kp N         &kp M       &kp COMMA         &kp DOT    &kp FSLH       &kp LS(INT1)
                               &kp INS       &kp LC(SPACE)             &tog MAC   &kp SPACE                                     &lt LWR RET   &kp BSPC    &kp DOWN          &kp UP
                                                                       &kp BSPC   &lt ADJ DEL                                   &kp LEFT      &kp RIGHT
                                                                       &mo RSE    &kp LALT                                      &kp LGUI      &sk LSHIFT
            >;
        };

        mac_layer {
            bindings = <
                &caps_word     &kp N1        &kp N2     &kp N3         &kp N4     &kp N5                                        &kp N6        &kp N7      &kp N8            &kp N9     &kp N0         &kp MINUS
                &kp TAB        &kp Q         &kp W      &kp E          &kp R      &kp T                                         &kp Y         &kp U       &kp I             &kp O      &kp P          &kp LBKT
                &mt LGUI RET   &kp A         &kp S      &kp D          &kp F      &kp G                                         &kp H         &kp J       &kp K             &kp L      &kp SEMI       &kp SQT
                &mt LSHIFT ESC &kp Z         &kp X      &kp C          &kp V      &kp B                                         &kp N         &kp M       &kp COMMA         &kp DOT    &kp FSLH       &kp LS(INT1)
                               &kp LANG1     &kp LANG2                 &tog MAC   &kp SPACE                                     &lt LWR RET   &kp BSPC    &kp DOWN          &kp UP
                                                                       &kp BSPC   &lt ADJ DEL                                   &kp LEFT      &kp RIGHT
                                                                       &mo RSE    &kp LALT                                      &kp LCTRL     &sk LSHIFT
            >;
        };

        lower_layer {
            bindings = < 
                &trans         &kp LS(N1)    &kp LS(N2)        &kp LS(N3)     &kp LS(N4)       &kp LS(N5)                                      &kp LS(N6)    &kp LS(N7)  &kp LS(N8)       &kp LS(N9)     &kp LS(N0)     &kp LS(MINUS)
                &trans         &kp PLUS      &kp LS(INT_YEN)   &kp EQUAL      &kp MINUS        &kp INT_YEN                                     &kp CARET     &kp STAR    &kp LPAR         &kp RBRC       &kp PIPE       &kp LS(LBKT)
                &trans         &kp RBKT      &kp BSLH          &kp PRCNT      &kp UNDERSCORE   &kp DLLR                                        &kp HASH      &kp AMPS    &kp AT           &kp QMARK      &kp COLON      &kp DQT
                &trans         &trans        &trans            &trans         &kp LT           &kp GT                                          &kp EXCL      &trans      &kp LS(COMMA)    &kp LS(DOT)    &kp LS(FSLH)   &kp INT1
                               &trans        &trans                           &trans           &trans                                          &trans        &trans      &trans           &trans
                                                                              &trans           &trans                                          &trans        &trans
                                                                              &trans           &trans                                          &trans        &trans 
            >;
        };

        raise_layer {
            bindings = < 
                &kp LG(V)      &kp LC(A)         &kp LC(C)        &kp LC(V)      &kp LC(X)         &trans                                      &kp LANG1    &kp LANG2     &trans      &trans        &trans         &trans
                &trans         &kp LC(DOWN)      &kp PG_DN        &kp UP         &kp PG_UP         &kp LC(UP)                                  &trans       &kp PG_UP     &kp HOME    &kp END       &kp PG_DN      &kp F12
                &trans         &kp HOME          &kp LEFT         &kp DOWN       &kp RIGHT         &kp END                                     &kp LEFT     &kp DOWN      &kp UP      &kp RIGHT     &kp K_CMENU    &kp RALT
                &trans         &kp F1            &kp F2           &kp F3         &kp F4            &kp F5                                      &kp F6       &kp F7        &kp F8      &kp F9        &kp F10        &kp F11
                               &kp C_VOL_DN      &kp C_VOL_UP                    &trans        &trans                                          &kp LC(LG(LEFT))       &kp LC(LG(RIGHT))     &kp LS(LG(S))      &kp LC(LS(LG(4)))
                                                                                 &trans        &kp LG(C)                                       &kp C_PREV             &kp C_NEXT
                                                                                 &trans        &trans                                          &kp C_PLAY_PAUSE       &kp C_STOP
            >;
        };

        adjust_layer {
            bindings = <
                &bt BT_CLR_ALL &bt BT_SEL 0      &bt BT_SEL 1     &bt BT_SEL 2   &bt BT_SEL 3      &bt BT_SEL 4                                &bt BT_DISC 0  &bt BT_DISC 1  &bt BT_DISC 2  &bt BT_DISC 3 &bt BT_DISC 4  &bt BT_CLR
                &trans         &kp COLON         &kp N7           &kp N8         &kp N9            &kp MINUS                                   &kp MINUS    &kp N7      &kp N8     &kp N9     &kp COLON     &trans
                &trans         &kp DOT           &kp N4           &kp N5         &kp N6            &kp DQT                                     &kp DQT      &kp N4      &kp N5     &kp N6     &kp DOT       &trans
                &trans         &kp N0            &kp N1           &kp N2         &kp N3            &kp FSLH                                    &kp FSLH     &kp N1      &kp N2     &kp N3     &kp SPACE     &trans
                                                 &kp LEFT         &kp RIGHT      &kp DOWN          &kp UP                                      &kp N0       &kp BSPC    &trans     &trans
                                                                                 &bootloader       &trans                                      &trans       &trans
                                                                                 &trans            &trans                                      &trans       &tog GAM
            >;
        };

        gaming_layer {
            bindings = <
                &kp ESC        &kp N1            &kp N2           &kp N3         &kp N4            &kp N5                         &kp N6        &kp N7      &kp N8            &kp N9     &kp N0         &kp MINUS
                &kp TAB        &kp T             &kp Q            &kp W          &kp E             &kp R                          &kp Y         &kp U       &kp I             &kp O      &kp P          &kp UNDERSCORE
                &kp LSHIFT     &kp G             &kp A            &kp S          &kp D             &kp F                          &kp H         &kp J       &kp K             &kp L      &kp SEMI       &kp SQT
                &kp LCTRL      &kp B             &kp Z            &kp X          &kp C             &kp V                          &kp N         &kp M       &kp COMMA         &kp DOT    &kp FSLH       &kp LS(INT1)
                                                 &kp C_VOL_DN     &kp C_VOL_UP   &kp RET           &kp SPACE                      &kp RET       &kp BSPC    &kp UP            &kp DOWN
                                                                                 &kp BSPC          &kp DEL                        &kp LEFT      &kp RIGHT
                                                                                 &mo RSE           &kp LALT                       &kp LGUI      &tog GAM
            >;
        };
    };
};
